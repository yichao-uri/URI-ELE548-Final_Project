-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RBM_control_split is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_control_in_TVALID : IN STD_LOGIC;
    control_ch173_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    control_ch173_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    control_ch173_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    control_ch173_full_n : IN STD_LOGIC;
    control_ch173_write : OUT STD_LOGIC;
    control_ch274_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    control_ch274_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    control_ch274_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    control_ch274_full_n : IN STD_LOGIC;
    control_ch274_write : OUT STD_LOGIC;
    control_ch375_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    control_ch375_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    control_ch375_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    control_ch375_full_n : IN STD_LOGIC;
    control_ch375_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    stream_control_in_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    stream_control_in_TREADY : OUT STD_LOGIC );
end;


architecture behav of RBM_control_split is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal tmp_nbreadreq_fu_34_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_reg_69 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal stream_control_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal control_ch173_blk_n : STD_LOGIC;
    signal control_ch274_blk_n : STD_LOGIC;
    signal control_ch375_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal stream_control_in_read_reg_73 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_stream_control_in_U_apdone_blk : STD_LOGIC;
    signal stream_control_in_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_control_in_TVALID_int_regslice : STD_LOGIC;
    signal stream_control_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_stream_control_in_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component RBM_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_stream_control_in_U : component RBM_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => stream_control_in_TDATA,
        vld_in => stream_control_in_TVALID,
        ack_in => regslice_both_stream_control_in_U_ack_in,
        data_out => stream_control_in_TDATA_int_regslice,
        vld_out => stream_control_in_TVALID_int_regslice,
        ack_out => stream_control_in_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_control_in_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                stream_control_in_read_reg_73 <= stream_control_in_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_69 <= tmp_nbreadreq_fu_34_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(real_start, ap_enable_reg_pp0_iter1, tmp_nbreadreq_fu_34_p3, ap_done_reg, control_ch173_full_n, tmp_reg_69, control_ch274_full_n, control_ch375_full_n, stream_control_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((control_ch375_full_n = ap_const_logic_0) and (tmp_reg_69 = ap_const_lv1_1)) or ((control_ch274_full_n = ap_const_logic_0) and (tmp_reg_69 = ap_const_lv1_1)) or ((tmp_reg_69 = ap_const_lv1_1) and (control_ch173_full_n = ap_const_logic_0)))) or ((real_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (stream_control_in_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(real_start, ap_enable_reg_pp0_iter1, tmp_nbreadreq_fu_34_p3, ap_done_reg, control_ch173_full_n, tmp_reg_69, control_ch274_full_n, control_ch375_full_n, stream_control_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((control_ch375_full_n = ap_const_logic_0) and (tmp_reg_69 = ap_const_lv1_1)) or ((control_ch274_full_n = ap_const_logic_0) and (tmp_reg_69 = ap_const_lv1_1)) or ((tmp_reg_69 = ap_const_lv1_1) and (control_ch173_full_n = ap_const_logic_0)))) or ((real_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (stream_control_in_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(real_start, ap_enable_reg_pp0_iter1, tmp_nbreadreq_fu_34_p3, ap_done_reg, control_ch173_full_n, tmp_reg_69, control_ch274_full_n, control_ch375_full_n, stream_control_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((control_ch375_full_n = ap_const_logic_0) and (tmp_reg_69 = ap_const_lv1_1)) or ((control_ch274_full_n = ap_const_logic_0) and (tmp_reg_69 = ap_const_lv1_1)) or ((tmp_reg_69 = ap_const_lv1_1) and (control_ch173_full_n = ap_const_logic_0)))) or ((real_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (stream_control_in_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(tmp_nbreadreq_fu_34_p3, ap_done_reg, stream_control_in_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (stream_control_in_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(control_ch173_full_n, tmp_reg_69, control_ch274_full_n, control_ch375_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((control_ch375_full_n = ap_const_logic_0) and (tmp_reg_69 = ap_const_lv1_1)) or ((control_ch274_full_n = ap_const_logic_0) and (tmp_reg_69 = ap_const_lv1_1)) or ((tmp_reg_69 = ap_const_lv1_1) and (control_ch173_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    control_ch173_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, control_ch173_full_n, tmp_reg_69, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_69 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            control_ch173_blk_n <= control_ch173_full_n;
        else 
            control_ch173_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    control_ch173_din <= stream_control_in_read_reg_73;

    control_ch173_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_69, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_69 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            control_ch173_write <= ap_const_logic_1;
        else 
            control_ch173_write <= ap_const_logic_0;
        end if; 
    end process;


    control_ch274_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_69, control_ch274_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_69 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            control_ch274_blk_n <= control_ch274_full_n;
        else 
            control_ch274_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    control_ch274_din <= stream_control_in_read_reg_73;

    control_ch274_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_69, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_69 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            control_ch274_write <= ap_const_logic_1;
        else 
            control_ch274_write <= ap_const_logic_0;
        end if; 
    end process;


    control_ch375_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_69, control_ch375_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_69 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            control_ch375_blk_n <= control_ch375_full_n;
        else 
            control_ch375_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    control_ch375_din <= stream_control_in_read_reg_73;

    control_ch375_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_69, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_69 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            control_ch375_write <= ap_const_logic_1;
        else 
            control_ch375_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    stream_control_in_TDATA_blk_n_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_34_p3, ap_done_reg, ap_block_pp0_stage0, stream_control_in_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_control_in_TDATA_blk_n <= stream_control_in_TVALID_int_regslice;
        else 
            stream_control_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_control_in_TREADY <= regslice_both_stream_control_in_U_ack_in;

    stream_control_in_TREADY_int_regslice_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_34_p3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_34_p3 = ap_const_lv1_1) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_control_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            stream_control_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_nbreadreq_fu_34_p3 <= (0=>(stream_control_in_TVALID_int_regslice), others=>'-');
end behav;
